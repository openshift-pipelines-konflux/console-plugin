/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1alpha2/parents/{parent}/results': {
    /**
     * Get the list of the Results
     * @description Results can be read across parents by specifying `-` as the `parent`. This is useful for listing all results stored in the system without prior knowledge about the available parents.
     */
    get: operations['list_results_by_parent_name'];
    parameters: {
      query?: {
        filter?: components['parameters']['filter'];
        page_token?: components['parameters']['page_token'];
        page_size?: components['parameters']['page_size'];
        order_by?: components['parameters']['order_by'];
      };
      path: {
        parent: components['parameters']['parent'];
      };
    };
  };
  '/v1alpha2/parents/{parent}/results/{result_uid}/records/{record_uid}': {
    /** Get a record given uid */
    get: operations['get_record_by_uid'];
    /** Create record with given uid */
    post: operations['create_record_by_uid'];
    /** Delete record given the uid */
    delete: operations['delete_record_by_uid'];
    /** Update a record given the uid */
    patch: {
      parameters: {
        path: {
          parent: components['parameters']['parent'];
          result_uid: components['parameters']['result_uid'];
          record_uid: components['parameters']['record_uid'];
        };
      };
      /** @description The record to be updated. */
      requestBody: {
        content: {
          'application/json': components['schemas']['Record'];
        };
      };
      responses: {
        /** @description Default response */
        200: {
          content: {
            'application/json': components['schemas']['Record'];
          };
        };
      };
    };
    parameters: {
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
        record_uid: components['parameters']['record_uid'];
      };
    };
  };
  '/v1alpha2/parents/{parent}/results/{result_uid}': {
    /** Get a single result given the UID */
    get: operations['get_result_by_uid'];
    /** Create a Result given data and UID */
    post: operations['create_result_by_uid'];
    /** Delete a particular result using UID */
    delete: operations['delete_result_by_uid'];
    /** Update result given the UID */
    patch: operations['update_result_by_uid'];
    parameters: {
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
      };
    };
  };
  '/v1alpha2/parents/{parent}/results/{result_uid}/logs': {
    /**
     * List Logs given the Result UID
     * @description Logs can be read across Results by specifying `-` as the `result_uid` or across parents by specifying `-` as the `parent`. (e.g., **default/results/-** or **-/results/-**). This can be used to read and filter matching Logs without knowing the exact Result name.
     */
    get: operations['list_logs_by_result_uid'];
    parameters: {
      query?: {
        filter?: components['parameters']['filter'];
        page_size?: components['parameters']['page_size'];
        page_token?: components['parameters']['page_token'];
        order_by?: components['parameters']['order_by'];
      };
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
      };
    };
  };
  '/v1alpha2/parents/{parent}/results/{result_uid}/logs/{log_uid}': {
    /** Get a Log given UID */
    get: operations['get_log_by_uid'];
    /** Delete a log given the UID */
    delete: operations['delete_log_by_uid'];
    parameters: {
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
        log_uid: components['parameters']['log_uid'];
      };
    };
  };
  '/v1alpha2/parents/{parent}/results/{result_uid}/records': {
    /**
     * Get list of records
     * @description Records can be read across Results by specifying `-` as the `result_uid` or across parents by specifying `-` as the `parent` . (e.g., **default/results/-** or **-/results/-**). This can be used to read and filter matching Records without knowing the exact Result name.
     */
    get: operations['get_records_by_results_uid'];
    parameters: {
      query?: {
        filter?: components['parameters']['filter'];
        order_by?: components['parameters']['order_by'];
        page_size?: components['parameters']['page_size'];
        page_token?: components['parameters']['page_token'];
      };
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @description It is unique identifier if the data type stored in the value. This is used as a type to hint to determine how to unmarshal values. Limited to 128 characters. Currently RecordType can be one of the following:
     * * PipelineRun Record: `tekton.dev/v1beta1.PipelineRun`
     * * TaskRun Record: `tekton.dev/v1beta1.TaskRun`
     * * Log Record: `results.tekton.dev/v1alpha2.Log`
     * @enum {string}
     */
    RecordType:
      | 'tekton.dev/v1beta1.PipelineRun'
      | 'tekton.dev/v1beta1.TaskRun'
      | 'results.tekton.dev/v1alpha2.Log';
    /**
     * @description Completion status of the Record.
     * @enum {string}
     */
    Status: 'UNKNOWN' | 'SUCCESS' | 'FAILURE' | 'TIMEOUT' | 'CANCELLED';
    /** @description Summary of the log properties. */
    LogSummary: {
      /** @description the name of the Record this summary represents. */
      record: string;
      /**
       * Format: int64
       * @description Number of bytes received while streaming.
       */
      bytesReceived?: number;
    };
    /** @description Log is a chunk of a log. */
    Log: {
      /** @description Resource name for the log. */
      name: string;
      /**
       * Format: byte
       * @description The log data as bytes.
       */
      data: string;
    };
    /** @description RecordSummary is a high level overview of a Record, typically representing a "root" record for a result. It includes type agonstic information so that UI's and other tools do not need to be aware of underlying types. */
    RecordSummary: {
      /**
       * @description The name of the Record this summary represents.
       * @example default/results/2be47d31-4d7f-4762-9616-969f2d7d9cc3/records/2be47d31-4d7f-4762-9616-969f2d7d9cc3
       */
      record: string;
      /**
       * @description Identifier of underlying data.
       * @example pipelines.tekton.dev/PipelineRun
       */
      type: string;
      status: components['schemas']['Status'];
      /** Format: date-time */
      startTime: string;
      /** Format: date-time */
      endTime: string;
      /** @description Key-value pairs representing abitrary underlying record data that clients want to include that aren't covered by the above fields. */
      annotations?: Record<string, never>;
    };
    /** @description Any represents lossely typed data to be stored within a Record. */
    Any: {
      /**
       * Format: byte
       * @description JSON encoded data.
       * @example VGhpcyBpcyBhbiBleG1hcGxlIG9mIHJlY29yZCBkYXRhCg==
       */
      value: string;
      type: components['schemas']['RecordType'];
    };
    /** @description Record belonging to a Result. Typically will be Tekton TaskRun/PipelineRun, but may also include other execution information e.g alternative configs, DSLs, input payloads, post-execution actions etc. */
    Record: {
      /**
       * @deprecated
       * @description DEPRECATED: use uid instead.
       */
      id?: string;
      /**
       * @description Server assigned identifier of the Record.
       * @example bc19969d-14ef-483c-b8c7-a83523cb5669
       */
      uid: string;
      /**
       * @description The etag for this record. If this is provided on update, it must match the server's etag.
       * @example bc19969d-14ef-483c-b8c7-a83523cb5669-1675088191915705326
       */
      etag?: string;
      /**
       * @description Resource name, must be rooted in parent result
       * @example default/results/2be47d31-4d7f-4762-9616-969f2d7d9cc3/records/293d2bf0-e673-30c6-b5ca-4f35f020effc
       */
      name: string;
      /**
       * Format: date-time
       * @deprecated
       * @description DEPRECATED: use createTime instead.
       */
      createdTime?: string;
      /**
       * Format: date-time
       * @description Server assigned timestamp for when the record was created.
       */
      createTime?: string;
      /**
       * Format: date-time
       * @deprecated
       * @description DEPRECATED: use updateTime instead.
       */
      updatedTime?: string;
      /**
       * Format: date-time
       * @description Server assigned timestamp for when the record was updated.
       */
      updateTime?: string;
      data: components['schemas']['Any'];
    };
    /** @description Results are aggregators of Records, allowing users to refer to groups of Records as a single entity. */
    Result: {
      /** @description Arbitrary user provided labels for the result. */
      annotations?: Record<string, never>;
      /**
       * @description server assigned identified of the Results
       * @example 0e0536c1-eccc-4727-9f99-5bb26ce3db90
       */
      uid: string;
      /**
       * @description User assigned identifier of the Result. Encodes Parent information.
       * @example default/results/2be47d31-4d7f-4762-9616-969f2d7d9cc3
       */
      name: string;
      /** @description High level overview of the root record for the Result. This is provided as a convinence for clients to query Record state without needing to make multiple calls to fetch the underlying Records. */
      summary?: components['schemas']['RecordSummary'];
      /**
       * Format: date-time
       * @deprecated
       * @description DEPRECATED: Use createTime instead
       */
      createdTime?: string;
      /**
       * Format: date-time
       * @description Server assigned timestamp for when the result was created.
       */
      createTime?: string;
      /**
       * Format: date-time
       * @deprecated
       * @description DEPRECATED: Use updateTime instead
       */
      updatedTime?: string;
      /**
       * Format: date-time
       * @description Server assigned timestamp for when the result was updated.
       */
      updateTime?: string;
      /**
       * @deprecated
       * @description DEPRECATED: use uid instead
       * @example 0e0536c1-eccc-4727-9f99-5bb26ce3db90
       */
      id?: string;
      /**
       * @description This is etag for Results. If this is provided on update, it must match the server's etag.
       * @example 0e0536c1-eccc-4727-9f99-5bb26ce3db90-1675088191880127798
       */
      etag?: string;
    };
  };
  responses: {
    /** @description List of Results with nextPageToken */
    ResultsList: {
      content: {
        'application/json': {
          results: components['schemas']['Result'][];
          nextPageToken: string;
        };
      };
    };
    /** @description List of Records with nextPageToken. */
    RecordsList: {
      content: {
        'application/json': {
          records: components['schemas']['Record'][];
          nextPageToken: string;
        };
      };
    };
  };
  parameters: {
    /** @description It can be used to fetch the next set of responses when the response is paginated. It corresponds to `NextPageToken` in the response. */
    page_token?: string;
    /** @description Number of response to fetch in one request. This query can be used for pagination. */
    page_size?: number;
    /** @description It is an alias to the record uid denoting a log. */
    log_uid: string;
    /** @description Record UID is the server assigned identifier of the Record. */
    record_uid: string;
    /** @description Result UID is the server assigned identifier of the result. */
    result_uid: string;
    /** @description Parent name refers to the namespace name or workspace name. */
    parent: string;
    /** @description This query can be used to pass CEL Expressions to filter the response. See more details [here](https://github.com/tektoncd/results/tree/main/docs/api#filtering). */
    filter?: string;
    /** @description This query can be used to order the response based on parameters. More details can be found [here](https://github.com/tektoncd/results/tree/main/docs/api#ordering). Note: Add `%20` instead of space when adding an optional direction qualifier, e.g `created_by%20asc`. */
    order_by?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Get the list of the Results
   * @description Results can be read across parents by specifying `-` as the `parent`. This is useful for listing all results stored in the system without prior knowledge about the available parents.
   */
  list_results_by_parent_name: {
    parameters: {
      query?: {
        filter?: components['parameters']['filter'];
        page_token?: components['parameters']['page_token'];
        page_size?: components['parameters']['page_size'];
        order_by?: components['parameters']['order_by'];
      };
      path: {
        parent: components['parameters']['parent'];
      };
    };
    responses: {
      200: components['responses']['ResultsList'];
    };
  };
  /** Get a record given uid */
  get_record_by_uid: {
    parameters: {
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
        record_uid: components['parameters']['record_uid'];
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          'application/json': components['schemas']['Record'];
        };
      };
    };
  };
  /** Create record with given uid */
  create_record_by_uid: {
    parameters: {
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
        record_uid: components['parameters']['record_uid'];
      };
    };
    /** @description The record to be created. */
    requestBody: {
      content: {
        'application/json': components['schemas']['Record'];
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          'application/json': components['schemas']['Record'];
        };
      };
    };
  };
  /** Delete record given the uid */
  delete_record_by_uid: {
    parameters: {
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
        record_uid: components['parameters']['record_uid'];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Record<string, never>;
        };
      };
    };
  };
  /** Get a single result given the UID */
  get_result_by_uid: {
    parameters: {
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          'application/json': components['schemas']['Result'];
        };
      };
    };
  };
  /** Create a Result given data and UID */
  create_result_by_uid: {
    parameters: {
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
      };
    };
    /** @description The result to be created */
    requestBody: {
      content: {
        'application/json': components['schemas']['Result'];
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          'application/json': components['schemas']['Result'];
        };
      };
    };
  };
  /** Delete a particular result using UID */
  delete_result_by_uid: {
    parameters: {
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          'application/json': components['schemas']['Result'];
        };
      };
    };
  };
  /** Update result given the UID */
  update_result_by_uid: {
    parameters: {
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
      };
    };
    /** @description The result to be updated. */
    requestBody: {
      content: {
        'application/json': components['schemas']['Result'];
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          'application/json': components['schemas']['Result'];
        };
      };
    };
  };
  /**
   * List Logs given the Result UID
   * @description Logs can be read across Results by specifying `-` as the `result_uid` or across parents by specifying `-` as the `parent`. (e.g., **default/results/-** or **-/results/-**). This can be used to read and filter matching Logs without knowing the exact Result name.
   */
  list_logs_by_result_uid: {
    parameters: {
      query?: {
        filter?: components['parameters']['filter'];
        page_size?: components['parameters']['page_size'];
        page_token?: components['parameters']['page_token'];
        order_by?: components['parameters']['order_by'];
      };
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
      };
    };
    responses: {
      200: components['responses']['RecordsList'];
    };
  };
  /** Get a Log given UID */
  get_log_by_uid: {
    parameters: {
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
        log_uid: components['parameters']['log_uid'];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Log'];
        };
      };
    };
  };
  /** Delete a log given the UID */
  delete_log_by_uid: {
    parameters: {
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
        log_uid: components['parameters']['log_uid'];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': Record<string, never>;
        };
      };
    };
  };
  /**
   * Get list of records
   * @description Records can be read across Results by specifying `-` as the `result_uid` or across parents by specifying `-` as the `parent` . (e.g., **default/results/-** or **-/results/-**). This can be used to read and filter matching Records without knowing the exact Result name.
   */
  get_records_by_results_uid: {
    parameters: {
      query?: {
        filter?: components['parameters']['filter'];
        order_by?: components['parameters']['order_by'];
        page_size?: components['parameters']['page_size'];
        page_token?: components['parameters']['page_token'];
      };
      path: {
        parent: components['parameters']['parent'];
        result_uid: components['parameters']['result_uid'];
      };
    };
    responses: {
      200: components['responses']['RecordsList'];
    };
  };
}
